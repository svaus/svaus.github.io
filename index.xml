<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs for dotnet, azure and devops</title>
    <link>https://svaus.github.io/</link>
    <description>Recent content on Blogs for dotnet, azure and devops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>© 2020.</copyright>
    <lastBuildDate>Sun, 10 May 2020 12:33:26 +1000</lastBuildDate>
    
	<atom:link href="https://svaus.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create Website in minutes with Hugo</title>
      <link>https://svaus.github.io/posts/createwebsiteusinghugo/</link>
      <pubDate>Sun, 31 May 2020 11:04:26 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/createwebsiteusinghugo/</guid>
      <description>graph LR A(&#34;Introduction&#34;) A--B(&#34;Prerequisites&#34;) B--C(&#34;Tools&#34;) C--D(&#34;Install Hugo&#34;) D--E(&#34;Create Website&#34;) E--F(&#34;Apply theme&#34;) F--G(&#34;Publish website&#34;) G--H(&#34;Conclusion&#34;) style A fill:#8451a1,stroke:#333,stroke-width:4px style B fill:#8451a1,stroke:#333,stroke-width:4px style C fill:#8451a1,stroke:#333,stroke-width:4px style D fill:#8451a1,stroke:#333,stroke-width:4px style E fill:#8451a1,stroke:#333,stroke-width:4px style F fill:#8451a1,stroke:#333,stroke-width:4px style G fill:#8451a1,stroke:#333,stroke-width:4px style H fill:#8451a1,stroke:#333,stroke-width:4px Introduction Prerequisites Tools Install Hugo Create Website Apply theme Publish website Conclusion </description>
    </item>
    
    <item>
      <title>Introuction to Blazor</title>
      <link>https://svaus.github.io/posts/blazor/introductiontoblazor/</link>
      <pubDate>Mon, 25 May 2020 12:51:37 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/blazor/introductiontoblazor/</guid>
      <description>Coming soon&amp;hellip;
Why? When? What? Conclusion </description>
    </item>
    
    <item>
      <title>Creating Blazor Component</title>
      <link>https://svaus.github.io/posts/blazor/creatingcomponent/</link>
      <pubDate>Sun, 24 May 2020 12:51:37 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/blazor/creatingcomponent/</guid>
      <description>Coming soon&amp;hellip;</description>
    </item>
    
    <item>
      <title>Managing configuration in React App</title>
      <link>https://svaus.github.io/posts/reactdotenv/</link>
      <pubDate>Mon, 11 May 2020 23:15:29 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/reactdotenv/</guid>
      <description>Coming soon..
Introduction React application these days is very easy to get started. However after using &amp;ldquo;getting started&amp;rdquo;, few things get interesting. Found managing configuration in a React Application one of them. If you are trying with Create React App its different. But generally we dont use Create React App in actual real world application. May be some people do, but I won&amp;rsquo;t. Why? Because I want little more control over dependencies, packages, extensibility, yada yada yada.</description>
    </item>
    
    <item>
      <title>Docker azure pipeline build agent</title>
      <link>https://svaus.github.io/posts/dockerazpbuildagent/</link>
      <pubDate>Sun, 10 May 2020 16:08:37 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/dockerazpbuildagent/</guid>
      <description>Creating a docker build agent for azure pipeline is very easy. There are few simple steps. We will be using chocoletey to create this agent.
Overall flow : graph TD A(&#34;Build Docker Image&#34;) A--B(&#34;Push image Azure Container Registry&#34;) B--C(&#34;Pull from Azure Container Registry&#34;) C--D(&#34;Create Docker container instance&#34;) D--E(&#34;Registers with Azure DevOps organisation&#34;) style A fill:#8451a1,stroke:#333,stroke-width:4px style B fill:#8451a1,stroke:#333,stroke-width:4px style C fill:#8451a1,stroke:#333,stroke-width:4px style D fill:#8451a1,stroke:#333,stroke-width:4px style E fill:#8451a1,stroke:#333,stroke-width:4px Firstly create a Dockerfile where we can provide docker instructions.</description>
    </item>
    
    <item>
      <title>Job scheduler with dotnet core</title>
      <link>https://svaus.github.io/posts/jobschedulerwithdotnetcore/</link>
      <pubDate>Sun, 10 May 2020 15:54:26 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/jobschedulerwithdotnetcore/</guid>
      <description>This is sample job scheduler with Topshelf, Autofac, Quartz, log4Net. Currently using DotNet Core 2.0 version
This repository implemetns a simple console application with following libraries
 Topshelf : For creating service Autofac : For dependency injection Quartz : For scheduling job, also uses xml based job configuration log4net : For logging  Installation Build the solution in release mode and copy to server directory. Open command prompt in the directory.</description>
    </item>
    
    <item>
      <title>Dotnet Core Api with Serilog, Autofac, Swagger</title>
      <link>https://svaus.github.io/posts/gettingstarteddotnetcoreapi/</link>
      <pubDate>Sun, 10 May 2020 13:06:28 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/gettingstarteddotnetcoreapi/</guid>
      <description>This blog post we will create a sample DotNet Core Api project with :
 Serilog implementation with various sinks console, file, application insigths Autofac Swagger with ReDoc and Material Design  Tools used  VS Code Aspnet Core 2.2 SDK Azure (For Application Insights only)  dotnet new webapi Add Serilog Logging to project Add below packages to solution/project
dotnet add package Serilog.AspNetCore dotnet add package Serilog.Sinks.Console dotnet add package Serilog.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://svaus.github.io/about/</link>
      <pubDate>Sun, 10 May 2020 12:33:26 +1000</pubDate>
      
      <guid>https://svaus.github.io/about/</guid>
      <description>Introduction Myself, Sanket Kumar Verma, and I love coding. Infact not coding but its kind of art, trying to understand complex business problems in a Developer way. Is there a difference? Yes. Finding most suited solution for the problem is very important. Application Architect with 13+ years of experience working in Software Industry. Australian experience around 8 years while working in Sydney.
Tools and Technologies: • Experience integration/application architect in Microservices, DevOps, Azure, Asp.</description>
    </item>
    
  </channel>
</rss>