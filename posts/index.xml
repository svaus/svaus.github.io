<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blogs for dotnet, azure and devops</title>
    <link>https://svaus.github.io/posts/</link>
    <description>Recent content in Posts on Blogs for dotnet, azure and devops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Â© 2020.</copyright>
    <lastBuildDate>Wed, 03 Jun 2020 22:33:25 +1000</lastBuildDate>
    
	<atom:link href="https://svaus.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DI in right way using Autofac</title>
      <link>https://svaus.github.io/posts/autofacbasics/</link>
      <pubDate>Wed, 03 Jun 2020 22:33:25 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/autofacbasics/</guid>
      <description>Coming soon&amp;hellip;
As requested by my dear friends.</description>
    </item>
    
    <item>
      <title>Browsers supported by blazor</title>
      <link>https://svaus.github.io/posts/blazor/browserssupportedbyblazor/</link>
      <pubDate>Wed, 03 Jun 2020 16:27:14 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/blazor/browserssupportedbyblazor/</guid>
      <description>Coming soon&amp;hellip;</description>
    </item>
    
    <item>
      <title>Is Blazor Web Assembly secured?</title>
      <link>https://svaus.github.io/posts/blazor/isblazorsecured/</link>
      <pubDate>Wed, 03 Jun 2020 16:25:23 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/blazor/isblazorsecured/</guid>
      <description>In this blog we will discuss about Blazor Web Assembly security at high level. Is Blazor Web Assembly secured?
Blazor allows Dlls to be downloaded to user&amp;rsquo;s browser. So user can get hold of the Dlls, decompile them and get source code from it. So at first go it might seem like a security issue, however it is not. We will discuss about it in detail, also few things or patterns that we need to be mindful when build application in Blazor.</description>
    </item>
    
    <item>
      <title>Create Website in minutes with Hugo</title>
      <link>https://svaus.github.io/posts/createwebsiteusinghugo/</link>
      <pubDate>Sun, 31 May 2020 11:04:26 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/createwebsiteusinghugo/</guid>
      <description>Introduction Creating a static website is very easy. There are many static site generators like Hugo, jKeyll, NextJS, etc. In this blog post we will discuss about Hugo.
Hugo is very popular static website generator. It allows you to create a static site in matter of minutes. Once we create this site, we need to host it some where. Hang on thats going to cost money. Naah!! Here comes GitHub Pages.</description>
    </item>
    
    <item>
      <title>Introduction to Blazor</title>
      <link>https://svaus.github.io/posts/blazor/introductiontoblazor/</link>
      <pubDate>Mon, 25 May 2020 12:51:37 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/blazor/introductiontoblazor/</guid>
      <description>Blazor Web Assembly is the new technology announced by Microsoft in Build conference 2020. This has been long time coming. Let us look at few basic things before we do a deep dive into Blazor.
Here in this blog I will write my point of view for Blazor. This will help developers who are getting started with Blazor to understand why? when? what&amp;rsquo;s not there?
I will keep reviewing this blog as an when I discover or learn more about this new framework.</description>
    </item>
    
    <item>
      <title>Creating Blazor Component</title>
      <link>https://svaus.github.io/posts/blazor/creatingcomponent/</link>
      <pubDate>Sun, 24 May 2020 12:51:37 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/blazor/creatingcomponent/</guid>
      <description>Coming soon&amp;hellip;</description>
    </item>
    
    <item>
      <title>Managing configuration in React App</title>
      <link>https://svaus.github.io/posts/reactdotenv/</link>
      <pubDate>Mon, 11 May 2020 23:15:29 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/reactdotenv/</guid>
      <description>Coming soon..
Introduction React application these days is very easy to get started. However after using &amp;ldquo;getting started&amp;rdquo;, few things get interesting. Found managing configuration in a React Application one of them. If you are trying with Create React App its different. But generally we dont use Create React App in actual real world application. May be some people do, but I won&amp;rsquo;t. Why? Because I want little more control over dependencies, packages, extensibility, yada yada yada.</description>
    </item>
    
    <item>
      <title>Job scheduler with dotnet core</title>
      <link>https://svaus.github.io/posts/jobschedulerwithdotnetcore/</link>
      <pubDate>Sun, 10 May 2020 15:54:26 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/jobschedulerwithdotnetcore/</guid>
      <description>This is sample job scheduler with Topshelf, Autofac, Quartz, log4Net. Currently using DotNet Core 2.0 version
This repository implemetns a simple console application with following libraries
 Topshelf : For creating service Autofac : For dependency injection Quartz : For scheduling job, also uses xml based job configuration log4net : For logging  Installation Build the solution in release mode and copy to server directory. Open command prompt in the directory.</description>
    </item>
    
    <item>
      <title>Dotnet Core Api with Serilog, Autofac, Swagger</title>
      <link>https://svaus.github.io/posts/gettingstarteddotnetcoreapi/</link>
      <pubDate>Sun, 10 May 2020 13:06:28 +1000</pubDate>
      
      <guid>https://svaus.github.io/posts/gettingstarteddotnetcoreapi/</guid>
      <description>This blog post we will create a sample DotNet Core Api project with :
 Serilog implementation with various sinks console, file, application insigths Autofac Swagger with ReDoc and Material Design  Tools used  VS Code Aspnet Core 2.2 SDK Azure (For Application Insights only)  dotnet new webapi Add Serilog Logging to project Add below packages to solution/project
dotnet add package Serilog.AspNetCore dotnet add package Serilog.Sinks.Console dotnet add package Serilog.</description>
    </item>
    
  </channel>
</rss>